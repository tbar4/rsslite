//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "rss_item")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub channel_id: i32,
    pub title: Option<String>,
    pub link: Option<String>,
    pub description: Option<String>,
    pub author: Option<String>,
    pub comments: Option<String>,
    pub pub_date: Option<String>,
    pub content: Option<String>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub extensions: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::rss_category::Entity")]
    RssCategory,
    #[sea_orm(
        belongs_to = "super::rss_channel::Entity",
        from = "Column::ChannelId",
        to = "super::rss_channel::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    RssChannel,
    #[sea_orm(has_many = "super::rss_dublin_core_ext::Entity")]
    RssDublinCoreExt,
    #[sea_orm(has_many = "super::rss_item_enclosure::Entity")]
    RssItemEnclosure,
    #[sea_orm(has_many = "super::rss_itunes_item_extension::Entity")]
    RssItunesItemExtension,
}

impl Related<super::rss_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssCategory.def()
    }
}

impl Related<super::rss_channel::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssChannel.def()
    }
}

impl Related<super::rss_dublin_core_ext::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssDublinCoreExt.def()
    }
}

impl Related<super::rss_item_enclosure::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssItemEnclosure.def()
    }
}

impl Related<super::rss_itunes_item_extension::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssItunesItemExtension.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
