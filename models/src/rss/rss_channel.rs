//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "rss_channel")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub link: String,
    pub description: String,
    pub language: Option<String>,
    pub copyright: Option<String>,
    pub managing_editor: Option<String>,
    pub webmaster: Option<String>,
    pub pub_date: Option<String>,
    pub last_build_date: Option<String>,
    pub generator: Option<String>,
    pub docs: Option<String>,
    pub rating: Option<String>,
    pub ttl: Option<String>,
    pub skip_hours: Json,
    pub skip_days: Json,
    pub extensions: Json,
    pub namespaces: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::rss_category::Entity")]
    RssCategory,
    #[sea_orm(has_many = "super::rss_cloud::Entity")]
    RssCloud,
    #[sea_orm(has_many = "super::rss_image::Entity")]
    RssImage,
    #[sea_orm(has_many = "super::rss_item::Entity")]
    RssItem,
    #[sea_orm(has_many = "super::rss_syndication_ext::Entity")]
    RssSyndicationExt,
    #[sea_orm(has_many = "super::rss_text_input::Entity")]
    RssTextInput,
}

impl Related<super::rss_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssCategory.def()
    }
}

impl Related<super::rss_cloud::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssCloud.def()
    }
}

impl Related<super::rss_image::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssImage.def()
    }
}

impl Related<super::rss_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssItem.def()
    }
}

impl Related<super::rss_syndication_ext::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssSyndicationExt.def()
    }
}

impl Related<super::rss_text_input::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssTextInput.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
