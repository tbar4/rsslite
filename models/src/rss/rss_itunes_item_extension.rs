//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "rss_itunes_item_extension")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub item_id: i32,
    pub author: Option<String>,
    pub block: Option<String>,
    pub image: Option<String>,
    pub duration: Option<String>,
    pub explicit: Option<String>,
    pub closed_caption: Option<String>,
    pub order: Option<String>,
    pub subtitle: Option<String>,
    pub summary: Option<String>,
    pub keywords: Option<String>,
    pub episode: Option<String>,
    pub season: Option<String>,
    pub episode_type: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::rss_item::Entity",
        from = "Column::ItemId",
        to = "super::rss_item::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    RssItem,
}

impl Related<super::rss_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssItem.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
